


============================================================================
Sections and comments in files.

Sections should be introduced with:

(* ********************************************************************** *)
(** * Title *)

Subections should be introduced with:

(* ---------------------------------------------------------------------- *)
(** ** Title *)

Sections and subsection titles should be preceeded by two blank lines,
and followed by one blank line.

Comments visible in the documentation should be introduced with:

(** Text *)


============================================================================
Header of a file

The top of the file should begin with elements in this order:

   Set Implicit Arguments.
   Require [Import|Export] Files.
   Generalizable Variables A B.
   Open Scope myscope.


============================================================================
Sections

Definitions should not be placed inside sections, except for local
definitions which are not intended to be exported.

Only type variables and typeclasses instances (typically [Inhab])
can be quantified as section variables.

A section thus contains mainly lemmas, with explicit quantification
of all variables and hypotheses, except type variables.
The use of "Implicit Types" is highly encouraged as it drastically
reduces the number of type annotations required.

Example:

   Definition length A (l:list A) : nat :=
     fold_right (fun x acc => 1+acc) 0 l.

   Section Length.
   Variables (A : Type).
   Implicit Types l : list A.

   Lemma length_nil :
     length (@nil A) = 0.
   Proof using. auto. Qed.

   Lemma length_cons : forall x l,
     length (x::l) = 1 + length l.
   Proof using. auto. Qed.

   End Length.

The command "Variables" is accepted for historical reasons,
but the modern version is "Context", which is more powerful:

   Section Nth.
   Context (A:Type) {IA:Inhab A}.
   Implicit Types n : nat.
   Implicit Types x : A.
   Implicit Types l : list A.

Note that all typeclass instances must be assigned a name explicitly.

Remark: the syntax of "Variables" without parentheses is accepted for
historical reasons, but is discouraged:

   Variables A : Type.


============================================================================
Indentation and style

Indentation should use two spaces.

The name of the lemma should be followed by a ":" surounded with spaces.

The arguments should follow on the same line (except if they don't fit on
the line, in which case they may start on the next line).

   The statement should be on the next line, indented with two spaces.
There is an exception for the special case where there are no
variables involved; then, the statement may be placed directly on the line.

Proofs should always begin with "Proof using." and end with "Qed.",
except typeclass instances which may conclude with "Defined."

Examples:

   Lemma istrue_or_eq : forall b1 b2,
     istrue (b1 || b2) = (istrue b1 \/ istrue b2).
   Proof using. extens. tautob. Qed.

   Lemma and_comm : comm and.
   Proof using. tautob. Qed.

There should be only one hypothesis per line.

   Lemma asym_inv : forall x y R,
     asym R ->
     R x y ->
     R y x ->
     False.

Multiline conclusions should be presented as follows:

   Lemma remove_duplicates_spec : forall l l',
     l' = remove_duplicates l ->
        noduplicates l'
     /\ (forall x, mem x l' <-> mem x l)
     /\ length l' <= length l.

   Lemma Exists_inv_middle_first : forall P l,
     Exists P l ->
     exists l1 x l2,
          l = l1++x::l2
       /\ Forall (fun x => ~ P x) l1
       /\ P x.

Similar conventions apply to definitions.
The body of the definition may be placed on the next line.

   Definition epsilon `{Inhab A} (P : A->Prop) : A :=
     sig_val (epsilon_def P).

   Definition env (A:Type) := list (var * A).



============================================================================
Parentheses

Variables quantified by "forall" or "fun" or "exists", when they are
annotated with a type, should be enclosed in parentheses.

  good:     fun (a:A) => ...
  bad:      fun a:A => ...
  good:     forall (a b:A), ...
  bad:      forall a b:A, ...

Variables of type "Type" may be written without annotation whenever
there are followed by other arguments using that type variables.
Then, it is not needed to annotate [(A:Type] since [A] suffices.

   Definition asym A (R:binary A) :=
     forall x y, R x y -> ~ R y x.

Note, however, the need to annotate type variables, e.g. in:

   Definition env (A:Type) := list (var * A).

Consecutive variables of a same type can be grouped, although this is not
mentatory.

   Definition incl A B (R1 R2 : A->B->Prop) :=
     forall x y, R1 x y -> R2 x y.

Spaces around ":" in type annotations may be removed, although this is not
mentatory.

   Definition incl A B (R1 R2:A->B->Prop) :=
     forall x y, R1 x y -> R2 x y.

The use of spaces around "->" is discouraged, as it takes too much space.
Sometimes, sure, it looks fine:

   Definition incl A B (R1 R2 : A -> B -> Prop) :=
     forall x y, R1 x y -> R2 x y.

but the use of too many spaces tend to not scale up well. Compare:

   Definition FixFunMod A B {IB:Inhab B} (E:binary B) (F:(A->B)->(A->B)) : A->B :=
   Definition FixFunMod A B {IB : Inhab B} (E : binary B) (F : (A -> B) -> (A -> B)) : A -> B :=

Automatic generalization is allowed, but only for type variables.
Typical pattern  [`{IA:Inhab A}] which quantifies [A] automatically.

Instance variables should be named (because otherwise using "Arguments"
for changing implicit arguments requires the "renaming" flag, whose use
may cause harm upon code refactoring.)

  good:     forall `{Inhab A}, ...
  bad:      forall `{IA:Inhab A}, ...

Definitions should have an explicit return type:

   Definition choose A `{IB:Inhab B} (R:A->B->Prop) : A->B :=
     fun (a:A) => epsilon (fun b => R a b).

   Definition neg (x:bool) : bool := ...

with an exception for when the result type is [Prop] or [Type]:

   Definition map (A B : Type) := A -> option B.

   Definition not (P : Prop) := P -> False.

   Class Notin_empty :=
     { notin_empty : forall x, x \notin \{} }.



============================================================================
Rewriting databases

A rewriting base, e.g. [rew_list] is intended to contain a set of
equalities to normalize expressions (the set should be confluent
and terminating). Only lemmas which are obviously simplifying the
goal should be added. Example:

   Hint Rewrite app_cons_l app_nil_l app_nil_r app_assoc
     app_cons_one_r : rew_list.

In particular, lemmas such as [n+0=n] should be added, as they simplify.
However, lemmas such as distributivity [a*(b+c)=a*b+a*c] should not be
added to rewriting base, as it is sometimes not desirable to distribute.

It is useful to declare a tactic to avoid the heavy syntax
[autorewrite with rew_list].

   Tactic Notation "rew_list" :=
     autorewrite with rew_list.
   Tactic Notation "rew_list" "~" :=
     rew_list; auto_tilde.
   Tactic Notation "rew_list" "*" :=
     rew_list; auto_star.
   Tactic Notation "rew_list" "in" "*" :=
     autorewrite_in_star_patch ltac:(fun tt => autorewrite with rew_list).
     (* autorewrite with rew_list in *. *)
   Tactic Notation "rew_list" "~" "in" "*" :=
     rew_list in *; auto_tilde.
   Tactic Notation "rew_list" "*" "in" "*" :=
     rew_list in *; auto_star.
   Tactic Notation "rew_list" "in" hyp(H) :=
     autorewrite with rew_list in H.
   Tactic Notation "rew_list" "~" "in" hyp(H) :=
     rew_list in H; auto_tilde.
   Tactic Notation "rew_list" "*" "in" hyp(H) :=
     rew_list in H; auto_star.

Remark: in the future, we hope to be able to define a generic tactic
called [rew] in such a way that [rew list] does the same as [rew_list].
Note that [rew_list in *] needs a workaround due to an efficiency bug.


============================================================================
Hints

Hints added by [Hint Resolve] or [Hint Constructors] or [Hint Extern]
should, by default, only be added to named hint databases.

Since the current [eauto with] syntax is fairly painful, we tolerate
a small number of obviously useful hints to be added to the core database.

Transitivity results should never be added as hints, for efficiency reasons.
One may, however, set up a Hint Extern for recognizing hypotheses that
may be exploited by transitivity.


============================================================================
Naming of definitions

*) Constructors for Inductive and Record definitions should be prefixed
   with the name of the result type.

   Inductive Forall A (P:A->Prop) : list A -> Prop :=
     | Forall_nil :
         Forall P nil
     | Forall_cons : forall l x,
         P x ->
         Forall P l ->
         Forall P (x::l).

*) Records should have a constructor explicitly named with the
   suffix [_make]. (Coq uses the prefix [Build_] by default,
   but this does not match our conventions.)

   Record order A (R:binary A) : Prop := order_make {
      order_refl : refl R;
      order_trans : trans R;
      order_antisym : antisym R }.


*) The suffix "_intro" should be used for an Inductive definition
   with a single constructor, or a Record with a single field.

      Class Inhab (A:Type) : Prop :=
        { Inhab_intro : (exists (x:A), True) }.

      Inductive Acc A (R:A->A->Prop) (x:A) : Prop :=
         | Acc_intro : (forall y:A, R y x -> Acc y) -> Acc x.

   Exception is for typeclass constructors with a single field,
   where the typeclass name is capitalized, and the constructor
   may be the same name in lowercase, instead of using the "_intro"
   suffix.

      Class In_union_l :=
        { in_union_l : forall x E F, x \in E -> x \in (E \u F) }.


============================================================================
Naming of lemmas


*) Interaction of a function and a constructor or a function
   are named by concatenating the name of the function and the constructor. 
   Examples:

      Lemma length_nil :
        length (@nil A) = 0.

      Lemma length_cons : forall x l,
        length (x::l) = 1 + length l.

      Lemma length_app : forall l1 l2,
        length (l1 ++ l2) = length l1 + length l2.

   If there might be ambiguities, or several possible right hand sides,
   then a longer named should be used. For example [length_app] is
   short for [length_app_eq_sum_length].
   


*) With propositional extensionality, there is no need for [<->],
   only [=] should be used. The string [eq] should always appear in the name
   for a lemma stating the equality between two propositions (but not be used
   for describing the behavior of a function with a result of kind [Type]).
   The reason why the string [eq] should not be dropped is because we wish
   to use the name without [eq] for the introduction lemma (see further.)
   Example:

      Lemma Forall_eq_forall_mem : forall P l,
        (Forall P l) = (forall x, mem x l -> P x).

   Examples, with abbreviated names in the cases where the right-and-side 
   is obvious:

      Lemma not_or_eq : forall P Q,
        ~ (P \/ Q) = (~ P /\ ~ Q).
        (* full name would have been [not_or_eq_and_not] *)

      Lemma Forall_cons_eq : forall P l x,
        Forall P (x::l) = (P x /\ Forall P l).
        (* full name would have been [Forall_cons_eq_pred_and_Forall] *)


*) When a function has several arguments, the name of the lemma should,
   in general, take into account all these arguments.

      Lemma rel_incl_stclosure_rstclosure : forall R,
        rel_incl (stclosure R) (rstclosure R).

   Exception is when an argument is "forced". For example [nth_zero_cons]
   can be abbreviated as [nth_zero], because the case [nth_zero_nil] is
   not interesting.

      Lemma nth_zero : forall x l,
        nth 0 (x::l) = x.

*) Sometimes two equivalent versions of a lemma are useful. Typically,
   an argument could be either written [S n] or [n'] with [n'>0].
   Thus, we have two versions:

      Lemma nth_succ : forall n x l,
        nth (S n) (x::l) = nth n l.

      Lemma nth_pos : forall n x l,
        n > 0 ->
        nth n (x::l) = nth (n-1) l.

*) When a lemma has a "left" and a "right" version or projection,
   the suffixes "_l" and "_r" should be used. Example:

      Lemma drop_app_l : forall n l l',
        (n <= length l) ->
        drop n (l ++ l') = drop n l ++ l'.

      Lemma drop_app_r : forall n l l',
        (n >= length l) ->
        drop n (l ++ l') = drop (n - length l) l'.

   Another example, for making a step in a transitive closure:

      Lemma tclosure_l : forall R y x z,
        R x y ->
        tclosure R y z ->
        tclosure R x z.

      Lemma tclosure_r : forall R y x z,
        tclosure R x y ->
        R y z ->
        tclosure R x z.


*) Interaction of a predicate and a constructor or function is more
   interesting. Consider "Forall" (all elements in a list satisfy
   a predicate) and "cons".

   The introduction lemma is named [Forall_cons]:

       Lemma Forall_cons : forall l x,
         P x ->
         Forall P l ->
         Forall P (x::l).

   Other examples:

      Lemma trans_tclosure : forall R,
        trans (tclosure R).

      Lemma rel_incl_tclosure : forall R,
        rel_incl R (tclosure R).

   When a lemma has pre-conditions, the name of these pre-conditions
   is written after the "of" separator.

      Lemma rstclosure_of_rsclosure : forall R x y,
        rsclosure R x y ->
        rstclosure R x y.

      Lemma sclosure_eq_of_sym : forall R,
        sym R ->
        sclosure R = R.

   Observe that the above lemma could be given two corollaries:

      Lemma rel_of_sclosure_sym : forall R,
        sclosure R x y ->
        sym R ->
        R x y.

      Lemma sclosure_of_rel_sym : forall R,
        R x y ->
        sym R ->
        sclosure R x y.

   When several premises are involved, just append their names:

       Lemma stclosure_of_sym_trans : forall R,
         sym R ->
         trans R ->
         stclosure R = R.

   In the rare case of ambiguities, an "and" separator may be
   inserted between the name of the hypotheses. For example,
   when [comm], [assoc] and [comm_assoc] are three properties,
   we may state:

      Lemma comm_assoc_of_comm_and_assoc : forall f,
        comm f ->
        assoc f ->
        comm_assoc f.

   An important exception is when the premise is a necessary requirement,
   then it is not needed to name the premise. For example, the transitive
   closure of a relation R can only be reflexive if R is reflexive. Thus,
   we shorten [refl_tclosure_of_refl] into [refl_tclosure]:

      Lemma refl_tclosure : forall R,
        refl R ->
        refl (tclosure R).

*) The order of variables/hypotheses is usually not so important, as long as
   some basic principles are followed:
   - variables that do not appear in the goal should be quantified first.
   - if the goal is an equality, variables that do not appear in the LHS of
     an equality should be quantified before the others.
   - hypotheses which involve the larger number of non-goal directed
     variables should appear first.
   - "side conditions" (e.g. n>0) should appear as last hypotheses.
   - hypotheses should be in the "natural reading order". Example:

       Lemma Forall_cons : forall l x,
         P x ->
         Forall P l ->
         Forall P (x::l).

       Lemma Forall_last : forall l x,
         Forall P l ->
         P x ->
         Forall P (l++(x::nil)).

*) There is one exception when the name of the lemma does not reflect its
   statement, is when an auxiliary definition is used for stating the lemma,
   but that the way the lemma is exploited in practice is the statement
   after unfolding of the auxiliary definition. For example, where [eqb] 
   is a boolean function testing equality of two booleans:

      Lemma eqb_true_l : neutral_l eqb true.

   because the statement is convertible with [forall x, eqb true x = x].
   Similarly:

      Lemma and_or_l : distrib_r and or.
      (* equivalent to [forall x y z, (x || y) && z = x && z || y && z]. *)

   [TODO: do we have a better way to handle this?]

*) An inversion lemma takes as first hypothesis a result, and is meant
   for forward reasoning. The suffix should be "_inv", as for example:

       Lemma Forall_cons_inv : forall l x,
         Forall P (x::l) ->
         P x /\ Forall P l.

   Often it is useful to have corollaries to the inversion lemma,
   named [Forall_cons_inv_xxx], where the suffix [xxx] describes
   which projection is obtained:

      Lemma Forall_cons_inv_head : forall P l x,
        Forall P (x::l) ->
        P x.

      Lemma Forall_cons_inv_tail : forall P l x,
        Forall P (x::l) ->
        Forall P l.

      Lemma mem_cons_inv : forall l x y,
        mem x (y::l) ->
        x = y \/ mem x l.

      Lemma mem_inv_middle : forall l x,
        mem x l ->
        exists l1 l2, l = l1++x::l2.

      Lemma mem_inv_middle_first : forall l x,
        mem x l ->
        exists l1 l2, l = l1++x::l2 /\ ~ mem x l1.

      Lemma tclosure_inv_r : forall R x z,
        tclosure R x z ->
        (R x z) \/ (exists y, tclosure R x y /\ R y z).

   Other examples of inversion lemmas, where [Nth n l x] asserts
   that the n-th element of [l] exists and is equal to [x].

      Lemma Nth_inv_neq_nil : forall n l x,
        Nth n l x ->
        l <> nil.

      Lemma Nth_nil_inv : forall n x,
        Nth n nil x ->
        False.

   Inversion lemmas that apply to an hypothesis which is not a
   predicate but an equality or disequality have their name
   starting with a description of the equality, then followed
   by "inv", then possibly followed by a suffix describing the
   kind of result obtained:

      Lemma cons_eq_nil_inv : forall x l,
        x::l = nil ->
        False.

      Lemma nil_eq_cons_inv : forall x l,
        nil = x::l ->
        False.

      Lemma list_neq_nil_inv_cons : forall l,
        l <> nil ->
        exists x q, l = x :: q.

      Lemma list_neq_nil_inv_last : forall l,
        l <> nil ->
        exists x q, l = q ++ x::nil.

      Lemma apply_eq_none_inv : forall A B (f : A->option B) x,
        apply x f = None ->
           (x = None)
        \/ (exists y, x = Some y /\ f y = None).

*) Sometimes one might hesitate in deciding whether a lemma is
   an inversion lemma or not. For example, should it be:

      Lemma eq_of_eq_existT : forall ...
        existT P p x = existT P p y ->
        x = y.

      Lemma eq_existT_inv : forall ...
        existT P p x = existT P p y ->
        x = y.

   [TOCHECK] The intuition is that when a lemma can apply both
   as a forward-chaining lemma and a backward-chaining lemma,
   then it likely asserts an equivalence between the hypotheses
   and the conclusion, in which case it should have a version
   stated as an equality [_eq] suffix, and one version stated as
   an inversion lemma [_inv] useful for forward chaining.
   Backward chaining can be more easily achieved by rewriting,
   so it is usually not needed to have a separate lemma.

      Lemma eq_existT_eq : forall ...
        (existT P p x = existT P p y) = (x = y).

      Lemma eq_existT_inv : forall ...
        existT P p x = existT P p y ->
        x = y.


*) Sometimes an inversion lemma does not even have any hypothesis.
   For example, a boolean is either true or false, so this result
   is an inversion result over a boolean value, resulting in a
   disjunction of equalities.

      Lemma bool_inv_or_eq : forall b,
         b = true \/ b = false.

   Similarly:

      Lemma unit_eq : forall (tt1 tt2 : unit),
        tt1 = tt2.

*) Sometimes it is not obvious in which direction it is desirable to state
   the equality. Consider the transitive closure of an inverse relation:

       tclosure (inverse R) = inverse (tclosure R)

   There is a priori no reason to favor one direction rather than the other.
   We thus impose the following convention: we assign a (somewhat arbitrary)
   order on definitions, which correspond to the order that definitions
   appear in the files. Intuitively, we try to put the definitions that are
   more "basic" before the ones that are more "complex" (or less frequently
   used). Here, we have decided that "inverse" is more basic than "tclosure".
   Thus, we write:

      Lemma tclosure_inverse_eq : forall R,
        tclosure (inverse R) = inverse (tclosure R).

   Note that this lemma would thus be included in the section establishing
   results about [tclosure], and not in the section about [inverse], since
   the section about [inverse] appears prior to the definition of [tclosure].

*) A function that converts from a type to another should be named
   using the infix keyword "to", and never "of", to avoid ambiguities
   with our convention for naming lemmas.

      bad:  Z_of_nat
      good: nat_to_Z

   This does not match the OCaml convention, unfortunately, but it
   is an arbitrary convention anyway.
